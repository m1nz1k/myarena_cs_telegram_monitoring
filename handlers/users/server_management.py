from aiogram import types
from loader import dp, bot
from aiogram.dispatcher import FSMContext
from utils.db_api import server_commands, quick_commands
from keyboards.inline import server_menu, server_list_menu
from utils.misc import (
    server_monitoring,
    get_maps,
    map_change,
    start_server,
    stop_server,
    restart_server,
    console_send,
    is_valid_token
)

from states import ConsoleInput, ServerAddStates
from aiogram.types import ParseMode



@dp.callback_query_handler(text_contains='server_monitoring')
async def server_check(callback_query: types.CallbackQuery):

    await callback_query.message.edit_text('–í—ã–ø–æ–ª–Ω—è—é –∑–∞–ø—Ä–æ—Å.üì® –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ! ‚è≥',
                                           reply_markup=server_menu)

    status = await server_monitoring(await quick_commands.get_user_active_token(callback_query.from_user.id))
    if status:
        await callback_query.message.edit_text(f'''
üè∑Ô∏è <b>–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞:</b> {status['name']}
üìå <b>–¢–∏–ø —Å–µ—Ä–≤–µ—Ä–∞:</b> {status['server_type']}                                            
üåç <b>–ê–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞:</b> <code>{status['server_address']}</code>
üìç <b>–õ–æ–∫–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞:</b> {status['server_location']}                                                                                         
üì° <b>–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞:</b> {status['online']}
üó∫Ô∏è <b>–ö–∞—Ä—Ç–∞:</b> {status['map']}
üë• <b>–û–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–æ–≤:</b> {status['players']}/{status['playersmax']}                                            
‚è≥ <b>–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π –∞—Ä–µ–Ω–¥—ã:</b> {status['server_daystoblock']}                                                                                                                              
''',
parse_mode=ParseMode.HTML,
reply_markup=server_menu)
        
    else:
        await callback_query.message.edit_text('‚ùå–ó–∞–ø—Ä–æ—Å –Ω–µ –ø—Ä–æ—à–µ–ª.',
                                               reply_markup=server_menu)
        

@dp.callback_query_handler(text_contains='server_change_map')
async def map_change_callback(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text('–í—ã–ø–æ–ª–Ω—è—é –∑–∞–ø—Ä–æ—Å.üì® –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ! ‚è≥',
                                           reply_markup=server_menu)
    maps_list = await get_maps(await quick_commands.get_user_active_token(callback_query.from_user.id))
    if maps_list:
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        for map_name in maps_list:
            callback_data = f"map|{map_name}"
            keyboard.add(types.InlineKeyboardButton(map_name, 
                                                    callback_data=callback_data))
        
        await callback_query.message.edit_text('üó∫Ô∏è–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É:', 
                                               reply_markup=keyboard)
    else:
        await callback_query.message.edit_text('‚ùå–ó–∞–ø—Ä–æ—Å –Ω–µ –ø—Ä–æ—à–µ–ª.', 
                                               reply_markup=server_menu)

@dp.callback_query_handler(text_contains='map|')
async def handle_map_selection(callback_query: types.CallbackQuery):
    map_name = callback_query.data.split('|')[1]
    await map_change(map_name, await quick_commands.get_user_active_token(callback_query.from_user.id))
    await callback_query.message.edit_text(f'‚úÖ–ö–∞—Ä—Ç–∞ {map_name} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!', 
                                           reply_markup=server_menu)

@dp.callback_query_handler(text_contains='server_start')
async def server_start(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text('–í—ã–ø–æ–ª–Ω—è—é –∑–∞–ø—Ä–æ—Å.üì® –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ! ‚è≥',
                                           reply_markup=server_menu)
    status = await start_server(await quick_commands.get_user_active_token(callback_query.from_user.id))

    if status:       
        await callback_query.message.edit_text('‚úÖ–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!', 
                                               reply_markup=server_menu)
    else:
        await callback_query.message.edit_text('‚ùå–ó–∞–ø—Ä–æ—Å –Ω–µ –ø—Ä–æ—à–µ–ª.', 
                                               reply_markup=server_menu)

@dp.callback_query_handler(text_contains='server_stop')
async def server_stop(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text('–í—ã–ø–æ–ª–Ω—è—é –∑–∞–ø—Ä–æ—Å.üì® –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ! ‚è≥',
                                           reply_markup=server_menu)
    status = await stop_server(await quick_commands.get_user_active_token(callback_query.from_user.id))
    if status:       
        await callback_query.message.edit_text('‚úÖ–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!', 
                                               reply_markup=server_menu)
    else:
        await callback_query.message.edit_text('‚ùå–ó–∞–ø—Ä–æ—Å –Ω–µ –ø—Ä–æ—à–µ–ª.', 
                                               reply_markup=server_menu)


@dp.callback_query_handler(text_contains='server_restart')
async def server_restart(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text('–í—ã–ø–æ–ª–Ω—è—é –∑–∞–ø—Ä–æ—Å.üì® –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ! ‚è≥',
                                           reply_markup=server_menu)
    status = await restart_server(await quick_commands.get_user_active_token(callback_query.from_user.id))
    if status:       
        await callback_query.message.edit_text('‚úÖ–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!', 
                                               reply_markup=server_menu)
    else:
        await callback_query.message.edit_text('‚ùå–ó–∞–ø—Ä–æ—Å –Ω–µ –ø—Ä–æ—à–µ–ª.', 
                                               reply_markup=server_menu)


@dp.callback_query_handler(text_contains='server_send_console')
async def server_send(callback_query: types.CallbackQuery, state: FSMContext):
    original_message = await callback_query.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:', 
                                                              reply_markup=server_menu)
    await state.update_data(original_message=original_message)
    await ConsoleInput.waiting_for_command.set()

@dp.message_handler(state=ConsoleInput.waiting_for_command)
async def process_command(message: types.Message, state: FSMContext):
    data = await state.get_data()
    original_message = data['original_message']
    chat_id = original_message['chat']['id']
    message_id = original_message['message_id']
    
    await bot.edit_message_text(chat_id=chat_id, 
                                message_id=message_id, 
                                text=f'–í—ã–ø–æ–ª–Ω—è—é –∑–∞–ø—Ä–æ—Å.üì® –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ! ‚è≥', 
                                reply_markup=server_menu)
    command = message.text
    await dp.bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    await state.finish() 
    status = await console_send(command, await quick_commands.get_user_active_token(message.from_user.id))
    if status:       
       await bot.edit_message_text(chat_id=chat_id, 
                                   message_id=message_id, 
                                   text=f'‚úÖ–ö–æ–º–º–∞–Ω–¥–∞ "{command}" —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!', 
                                   reply_markup=server_menu)
    else:
      await bot.edit_message_text(chat_id=chat_id, 
                                  message_id=message_id, 
                                  text='‚ùå–ó–∞–ø—Ä–æ—Å –Ω–µ –ø—Ä–æ—à–µ–ª.', 
                                  reply_markup=server_menu)
      


@dp.callback_query_handler(text_contains='server_list')
async def servers_menu(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text('‚ö†Ô∏è –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å, –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–µ—Ä',
                                           reply_markup=server_list_menu)

@dp.callback_query_handler(text_contains='server_add')
async def server_add_handler(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text('üü¢ –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω —Å–µ—Ä–≤–µ—Ä–∞:', reply_markup=server_list_menu)

    await state.update_data(original_chat_id=callback_query.message.chat.id, original_message_id=callback_query.message.message_id)
    await ServerAddStates.WaitingForToken.set()

@dp.message_handler(state=ServerAddStates.WaitingForToken)
async def process_server_token(message: types.Message, state: FSMContext):
    await dp.bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)

    data = await state.get_data()
    chat_id = data['original_chat_id']
    message_id = data['original_message_id']


    if not await is_valid_token(message.text):
        await message.bot.edit_message_text(chat_id=chat_id,
                                            message_id=message_id,
                                            text='‚ùå –í–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!',
                                            reply_markup=server_list_menu)
        await state.finish()
        return
    await state.update_data(token=message.text)

    await message.bot.edit_message_text(chat_id=chat_id,
                                        message_id=message_id,
                                        text='üü¢ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ!',
                                        reply_markup=server_list_menu)
    await ServerAddStates.WaitingForName.set()


@dp.message_handler(state=ServerAddStates.WaitingForName)
async def process_server_name(message: types.Message, state: FSMContext):
    await dp.bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    
    data = await state.get_data()
    chat_id = data['original_chat_id']
    message_id = data['original_message_id']
    token = data.get('token')


    if await server_commands.create_server(server_token=token, server_name=message.text):
        await message.bot.edit_message_text(chat_id=chat_id,
                                            message_id=message_id,
                                            text='‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.',
                                            reply_markup=server_list_menu)
    else:
        await message.bot.edit_message_text(chat_id=chat_id,
                                            message_id=message_id,
                                            text='‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å.',
                                            reply_markup=server_list_menu)

    await state.finish()


# —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏–∑ –ë–î
async def get_servers_inline_keyboard(user_id: int):
    servers = await server_commands.get_all_servers()
    user = await quick_commands.get_user_by_id(user_id)
    active_token = user.active_token if user else None

    inline_keyboard = []
    for server in servers:
        button_text = server.server_name

        if active_token == server.server_token:
            button_text = "üü¢" + button_text
        inline_keyboard.append([types.InlineKeyboardButton(text=button_text, callback_data=f"server_select_{server.server_token}")])

    inline_keyboard.append([types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")])

    return types.InlineKeyboardMarkup(inline_keyboard=inline_keyboard)


# –≤—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞
@dp.callback_query_handler(lambda query: query.data == 'select_server')
async def process_select_server(callback_query: types.CallbackQuery):
    await send_servers_list(callback_query.message, callback_query.from_user.id)

# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞
async def send_servers_list(message: types.Message, user_id: int):
    inline_keyboard = await get_servers_inline_keyboard(user_id)
    await bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id, text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:", reply_markup=inline_keyboard)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞
@dp.callback_query_handler(lambda query: query.data.startswith('server_select'))
async def process_server_select(callback_query: types.CallbackQuery):

    server_token = callback_query.data.split('_')[2]

    await quick_commands.update_user_active_token(callback_query.from_user.id, server_token)

    await send_servers_list(callback_query.message, callback_query.from_user.id)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
@dp.callback_query_handler(lambda query: query.data == 'back_to_menu')
async def process_back_to_menu(callback_query: types.CallbackQuery):
    await bot.edit_message_text(chat_id=callback_query.message.chat.id, 
                                message_id=callback_query.message.message_id, 
                                text="–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–º –Ω–∞ –ø—Ä–æ–µ–∫—Ç–µ MyArena.",
                                reply_markup=server_menu)
    

# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤
async def get_delete_server_inline_keyboard():
    servers = await server_commands.get_all_servers()

    inline_keyboard = []
    for server in servers:
        button_text = f"–£–¥–∞–ª–∏—Ç—å {server.server_name}"
        inline_keyboard.append([types.InlineKeyboardButton(text=button_text, callback_data=f"db_del_{server.server_token}")])

    inline_keyboard.append([types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")])

    return types.InlineKeyboardMarkup(inline_keyboard=inline_keyboard)

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ server_del
@dp.callback_query_handler(text_contains='server_del')
async def process_server_delete(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    delete_servers_keyboard = await get_delete_server_inline_keyboard()
    
    if not delete_servers_keyboard.inline_keyboard:
        await bot.edit_message_text(chat_id=user_id, 
                                    message_id=callback_query.message.message_id,
                                    text="–°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ –ø—É—Å—Ç.",
                                    reply_markup=server_list_menu)
        return

    await bot.edit_message_text(chat_id=user_id, 
                                message_id=callback_query.message.message_id,
                                text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", 
                                reply_markup=delete_servers_keyboard)

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
@dp.callback_query_handler(lambda query: query.data.startswith('db_del_'))
async def process_server_delete_confirm(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    server_token = callback_query.data.split('_')[2]
    

    try:
        deleted = await server_commands.delete_server(server_token)
        if deleted:
            await bot.edit_message_text(chat_id=user_id, 
                                        message_id=callback_query.message.message_id,
                                        text=f"‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.",
                                        reply_markup=server_menu)
        else:
            await bot.edit_message_text(chat_id=user_id, 
                                        message_id=callback_query.message.message_id,
                                        text=f"‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                                        reply_markup=server_menu)
    except Exception as e:
        await bot.edit_message_text(chat_id=user_id, 
                                    message_id=callback_query.message.message_id,
                                    text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞: {e}",
                                    reply_markup=server_menu)